import React, { useState, useCallback, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';

function App() {
    // State to manage the active view: 'upload' or 'review'
    const [view, setView] = useState('upload');
    // State to store uploaded files (for visual representation, not actual processing)
    const [files, setFiles] = useState([]);
    // State to store mock categorized expenses with AI suggestions
    const [categorizedExpenses, setCategorizedExpenses] = useState([]);
    // State for showing loading indicator during mock AI processing
    const [isLoading, setIsLoading] = useState(false);
    // State for displaying user-facing messages (e.g., success messages)
    const [message, setMessage] = useState('');

    // LLM-powered feature states: Deduction Explanation
    const [aiExplanation, setAiExplanation] = useState('');
    const [isExplaining, setIsExplaining] = useState(false);
    const [showExplanationModal, setShowExplanationModal] = useState(false);

    // LLM-powered feature states: Compliance Tip
    const [complianceTip, setComplianceTip] = useState('');
    const [isGeneratingTip, setIsGeneratingTip] = useState(false);

    // This is a placeholder for your Firebase configuration.
    // In a real Canvas environment, __firebase_config would be globally available.
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
        apiKey: "YOUR_API_KEY",
        authDomain: "YOUR_AUTH_DOMAIN",
        projectId: "YOUR_PROJECT_ID",
        storageBucket: "YOUR_STORAGE_BUCKET",
        messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
        appId: "YOUR_APP_ID"
    };

    // Placeholder for the App ID.
    // In a real Canvas environment, __app_id would be globally available.
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'taxsense-ai-app';

    // Mock API Key for LLM calls - Leave this empty, Canvas will handle it.
    const LLM_API_KEY = ""; 

    // Mock AI categorization function to simulate backend processing
    // In a real application, this would involve a fetch call to an actual AI service
    const mockAICategorize = useCallback(async (file) => {
        // Simulate a network delay to represent AI processing time
        await new Promise(resolve => setTimeout(Math.random() * 1000 + 500, resolve)); // 0.5 to 1.5 seconds delay

        const fileName = file.name;
        let category = 'Uncategorized';
        let deductible = false;
        let amount = Math.floor(Math.random() * 9901) + 100; // Random amount between 100 and 10000

        // Simple mock logic based on keywords in filename for categorization
        if (fileName.toLowerCase().includes('office')) {
            category = 'Office Supplies';
            deductible = true;
        } else if (fileName.toLowerCase().includes('travel')) {
            category = 'Travel Expenses';
            deductible = true;
        } else if (fileName.toLowerCase().includes('utility') || fileName.toLowerCase().includes('bill')) {
            category = 'Utilities';
            deductible = true;
        } else if (fileName.toLowerCase().includes('salary') || fileName.toLowerCase().includes('payroll')) {
            category = 'Salaries & Wages';
            deductible = true;
        } else if (fileName.toLowerCase().includes('marketing') || fileName.toLowerCase().includes('ad')) {
            category = 'Marketing & Advertising';
            deductible = true;
        } else if (fileName.toLowerCase().includes('rent')) {
            category = 'Rent Expense';
            deductible = true;
        } else if (fileName.toLowerCase().includes('personal')) {
            category = 'Personal Expense';
            deductible = false;
        }

        // Return the structured mock AI result
        return {
            id: `${fileName}-${Date.now()}-${Math.random()}`, // Unique ID for each expense item
            fileName: fileName,
            amount: amount,
            aiSuggestedCategory: category,
            userCorrectedCategory: category, // User correction starts with AI suggestion
            aiSuggestedDeductible: deductible,
            userCorrectedDeductible: deductible, // User correction starts with AI suggestion
            status: 'AI Categorized'
        };
    }, []);

    // Callback function for when files are dropped or selected via input
    const onDrop = useCallback(async (acceptedFiles) => {
        // Add new files to the current list of files
        setFiles(prevFiles => [...prevFiles, ...acceptedFiles]);
        setIsLoading(true); // Show loading indicator
        setMessage('AI is meticulously analyzing your expenses...'); // Display a message
        setComplianceTip(''); // Clear previous tip

        const newCategorizedExpenses = [];
        // Process each accepted file through the mock AI categorization
        for (const file of acceptedFiles) {
            const result = await mockAICategorize(file);
            newCategorizedExpenses.push(result);
        }

        // Update the state with newly categorized expenses
        setCategorizedExpenses(prevExpenses => [...prevExpenses, ...newCategorizedExpenses]);
        setIsLoading(false); // Hide loading indicator
        setMessage('Expenses analyzed! Please review.'); // Update message
        setView('review'); // Switch to the review view automatically
    }, [mockAICategorize]);

    // Initialize the react-dropzone hook for file input functionality
    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/jpeg': [], // Accept JPEG images
            'image/png': [],  // Accept PNG images
            'application/pdf': [], // Accept PDF documents
            'text/csv': [] // Accept CSV files
        }
    });

    // Handler for when a user changes the category for an expense
    const handleCategoryChange = (id, newCategory) => {
        setCategorizedExpenses(prevExpenses =>
            prevExpenses.map(exp =>
                exp.id === id ? { ...exp, userCorrectedCategory: newCategory } : exp
            )
        );
    };

    // Handler for when a user changes the deductible status for an expense
    const handleDeductibleChange = (id, newStatus) => {
        setCategorizedExpenses(prevExpenses =>
            prevExpenses.map(exp =>
                exp.id === id ? { ...exp, userCorrectedDeductible: newStatus } : exp
            )
        );
    };

    // Handler for confirming all expenses after review
    const handleConfirmExpenses = () => {
        setMessage('All expenses confirmed and successfully added to your tax reports!');
        setFiles([]); // Clear the uploaded files from state
        setCategorizedExpenses([]); // Clear the categorized expenses
        setView('upload'); // Navigate back to the upload view for new inputs
        setAiExplanation(''); // Clear any open explanation
        setComplianceTip(''); // Clear any open tip
    };

    // Function to call Gemini API for deduction explanation
    const handleGetAIExplanation = async (expense) => {
        setIsExplaining(true);
        setAiExplanation(''); // Clear previous explanation

        const prompt = `Provide a concise, 2-3 sentence explanation for why a "${expense.userCorrectedCategory}" expense is typically deductible for a small business or freelancer in India, referencing general Indian tax principles (e.g., "business expense"). Avoid specific section numbers unless very common like 37(1).`;

        try {
            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${LLM_API_KEY}`;
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setAiExplanation(text);
                setShowExplanationModal(true); // Show modal
            } else {
                setAiExplanation('Could not generate an explanation. Please try again.');
            }
        } catch (error) {
            console.error("Error calling Gemini API for explanation:", error);
            setAiExplanation('Failed to get explanation. Please check your network or try again.');
        } finally {
            setIsExplaining(false);
        }
    };

    // Function to call Gemini API for a general compliance tip
    const handleGenerateComplianceTip = async () => {
        setIsGeneratingTip(true);
        setComplianceTip(''); // Clear previous tip

        const categoriesPresent = Array.from(new Set(categorizedExpenses.map(exp => exp.userCorrectedCategory))).join(', ');
        const prompt = `Given that a user has categorized expenses including: ${categoriesPresent || 'various common business expenses'}, provide 1-2 concise, practical tax compliance tips for an Indian small business or freelancer for the upcoming tax season. Focus on common pitfalls or overlooked opportunities relevant to general business operations in India. Keep it under 60 words.`;

        try {
            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${LLM_API_KEY}`;
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setComplianceTip(text);
            } else {
                setComplianceTip('Could not generate a compliance tip. Try again after categorizing more expenses!');
            }
        } catch (error) {
            console.error("Error calling Gemini API for compliance tip:", error);
            setComplianceTip('Failed to generate tip. Please check your network or try again.');
        } finally {
            setIsGeneratingTip(false);
        }
    };

    // Calculate total potential savings based on deductible expenses
    const totalPotentialSavings = categorizedExpenses.reduce((sum, exp) => {
        // Assuming a mock tax saving percentage of 20% for deductible expenses
        return exp.userCorrectedDeductible ? sum + (exp.amount * 0.20) : sum;
    }, 0);

    // Hardcoded list of common expense categories for the dropdowns
    const categoryOptions = [
        'Office Supplies', 'Travel Expenses', 'Utilities', 'Marketing & Advertising',
        'Rent Expense', 'Salaries & Wages', 'Professional Fees', 'Software Subscriptions',
        'Vehicle Maintenance', 'Meals & Entertainment', 'Bank Charges',
        'Other Business Expenses', 'Personal Expense', 'Uncategorized'
    ];

    return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 font-sans text-gray-800 p-4 sm:p-8 flex flex-col items-center">
            <header className="w-full max-w-4xl text-center mb-8">
                <h1 className="text-4xl sm:text-5xl font-extrabold text-purple-700 mb-2">
                    TaxSense AI
                </h1>
                <p className="text-xl sm:text-2xl text-purple-500">
                    Smart Expense & Deduction Optimizer
                </p>
                <nav className="mt-6 flex justify-center space-x-4">
                    <button
                        onClick={() => { setView('upload'); setMessage(''); setAiExplanation(''); setShowExplanationModal(false); setComplianceTip(''); }}
                        className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                            view === 'upload' ? 'bg-purple-600 text-white shadow-lg' : 'bg-white text-purple-600 border border-purple-300 hover:bg-purple-50 hover:text-purple-700'
                        }`}
                    >
                        Upload Expenses
                    </button>
                    <button
                        onClick={() => { setView('review'); setMessage(''); setAiExplanation(''); setShowExplanationModal(false); }}
                        className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                            view === 'review' ? 'bg-purple-600 text-white shadow-lg' : 'bg-white text-purple-600 border border-purple-300 hover:bg-purple-50 hover:text-purple-700'
                        }`}
                    >
                        Review & Optimize
                    </button>
                </nav>
            </header>

            <main className="w-full max-w-4xl bg-white rounded-xl shadow-2xl p-6 sm:p-8">
                {message && (
                    <div className="mb-6 p-4 rounded-lg bg-blue-100 text-blue-700 font-medium text-center shadow-inner">
                        {message}
                    </div>
                )}

                {/* Compliance Tip Section */}
                {(view === 'upload' || view === 'review') && (
                    <div className="flex justify-center mb-6">
                        <button
                            onClick={handleGenerateComplianceTip}
                            disabled={isGeneratingTip}
                            className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-6 rounded-full shadow-md flex items-center transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isGeneratingTip ? (
                                <>
                                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                    Generating Tip...
                                </>
                            ) : (
                                <>
                                    Get ✨ AI Tip
                                </>
                            )}
                        </button>
                    </div>
                )}
                {complianceTip && (
                    <div className="mb-6 p-4 rounded-lg bg-yellow-50 border border-yellow-200 text-yellow-800 shadow-inner">
                        <div className="flex justify-between items-start">
                            <p className="font-semibold">Compliance Tip:</p>
                            <button onClick={() => setComplianceTip('')} className="text-yellow-600 hover:text-yellow-900 font-bold text-xl leading-none">&times;</button>
                        </div>
                        <p className="mt-2 text-sm">{complianceTip}</p>
                    </div>
                )}
                {/* End Compliance Tip Section */}

                {view === 'upload' && (
                    <section className="flex flex-col items-center justify-center p-8 border-4 border-dashed border-purple-300 rounded-lg text-center bg-purple-50 hover:bg-purple-100 transition-all duration-300 h-64">
                        <div {...getRootProps()} className="cursor-pointer w-full h-full flex flex-col items-center justify-center">
                            <input {...getInputProps()} />
                            {isLoading ? (
                                <div className="flex items-center justify-center">
                                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mr-4"></div>
                                    <p className="text-purple-600 text-lg font-semibold">AI is analyzing your expenses...</p>
                                </div>
                            ) : (
                                <>
                                    <svg className="w-16 h-16 text-purple-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 0115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v8"></path>
                                    </svg>
                                    <p className="text-xl font-semibold text-gray-700">Drag & Drop Your Receipts Here</p>
                                    <p className="text-gray-500 mt-2">or click to select files (JPG, PNG, PDF, CSV)</p>
                                    {isDragActive && <p className="text-sm text-purple-400">Release to drop the files...</p>}
                                </>
                            )}
                        </div>
                    </section>
                )}

                {view === 'review' && (
                    <section className="mt-6">
                        <h2 className="text-2xl font-bold text-purple-700 mb-4">Review AI Suggestions</h2>
                        {isLoading ? (
                            <div className="flex items-center justify-center py-8">
                                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mr-4"></div>
                                <p className="text-purple-600 text-lg">AI is meticulously categorizing your expenses...</p>
                            </div>
                        ) : categorizedExpenses.length === 0 ? (
                            <p className="text-center text-gray-500 py-8">No expenses to review. Please upload some first!</p>
                        ) : (
                            <>
                                <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg shadow-inner">
                                    <p className="text-green-700 font-semibold text-lg">
                                        Total Potential Tax Savings Identified: ₹{totalPotentialSavings.toLocaleString('en-IN', { maximumFractionDigits: 2 })}
                                    </p>
                                    <p className="text-green-600 text-sm mt-1">
                                        (Based on AI-identified deductible expenses and mock tax rates)
                                    </p>
                                </div>

                                <div className="overflow-x-auto rounded-lg border border-gray-200">
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File Name</th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount (₹)</th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AI Category</th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Deductible?</th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {categorizedExpenses.map((expense) => (
                                                <tr key={expense.id} className="hover:bg-gray-50">
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 truncate max-w-xs">{expense.fileName}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{expense.amount.toLocaleString('en-IN')}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        <select
                                                            value={expense.userCorrectedCategory}
                                                            onChange={(e) => handleCategoryChange(expense.id, e.target.value)}
                                                            className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md shadow-sm"
                                                        >
                                                            {categoryOptions.map(option => (
                                                                <option key={option} value={option}>{option}</option>
                                                            ))}
                                                        </select>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        <select
                                                            value={expense.userCorrectedDeductible ? 'Yes' : 'No'}
                                                            onChange={(e) => handleDeductibleChange(expense.id, e.target.value === 'Yes')}
                                                            className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md shadow-sm"
                                                        >
                                                            <option value="Yes">Yes</option>
                                                            <option value="No">No</option>
                                                        </select>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        {expense.userCorrectedDeductible && (
                                                            <button
                                                                onClick={() => handleGetAIExplanation(expense)}
                                                                disabled={isExplaining}
                                                                className="text-purple-600 hover:text-purple-900 transition-colors duration-200 mr-2 flex items-center justify-center text-sm"
                                                            >
                                                                {isExplaining ? (
                                                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-500"></div>
                                                                ) : (
                                                                    <>
                                                                        Get ✨ Explanation
                                                                    </>
                                                                )}
                                                            </button>
                                                        )}
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                                <div className="mt-8 flex justify-center">
                                    <button
                                        onClick={handleConfirmExpenses}
                                        className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transform transition-all duration-300 hover:scale-105 active:scale-95"
                                    >
                                        Confirm All & Apply Savings
                                    </button>
                                </div>
                            </>
                        )}
                    </section>
                )}
            </main>

            {/* AI Explanation Modal */}
            {showExplanationModal && (
                <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex justify-center items-center p-4">
                    <div className="relative bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto">
                        <button
                            onClick={() => setShowExplanationModal(false)}
                            className="absolute top-3 right-3 text-gray-500 hover:text-gray-800 text-2xl font-bold leading-none"
                        >
                            &times;
                        </button>
                        <h3 className="text-xl font-bold text-purple-700 mb-4">✨ AI Deduction Explanation</h3>
                        {isExplaining ? (
                            <div className="flex items-center justify-center py-4">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mr-4"></div>
                                <p className="text-purple-600">Generating explanation...</p>
                            </div>
                        ) : (
                            <p className="text-gray-700 text-sm">{aiExplanation}</p>
                        )}
                        <div className="mt-6 flex justify-end">
                            <button
                                onClick={() => setShowExplanationModal(false)}
                                className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-md shadow-sm"
                            >
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            )}

            <footer className="w-full max-w-4xl text-center mt-8 text-gray-500 text-sm">
                <p>&copy; {new Date().getFullYear()} Masters India Pvt. Ltd. | AI-Powered Tax Solutions</p>
                <p className="mt-2">Disclaimer: This is a prototype for demonstration purposes only. AI suggestions are mock and not tax advice.</p>
            </footer>
        </div>
    );
}

export default App;
